//
//  ContentView.swift
//  Discover
//
//  Created by Grant Randa on 9/2/22.
//

import SwiftUI
import JavaScriptCore
import EventSource
import Starscream

struct CreateResponse: Codable {
    var title: String
    var channelId: String
}

class Delegate: WebSocketDelegate {
    var socket: WebSocket!
    var isConnected = false
    var id = UUID().uuidString
    var channelId: String!
    
    func createSession() async {
        let session = URLSession.shared
        do {
            let response = try await session.data(from: URL(string: "https://solve.hop.sh/multiplayer/create")!)
            let data = try JSONDecoder().decode(CreateResponse.self, from: response.0)
            channelId = data.channelId
            print(data)
        } catch {
            print(error)
        }
    }
    
    func joinSession(channelId: String) {
        var request = URLRequest(url: URL(string: "https://solve.hop.sh/multiplayer/join?clientId=\(id)&channelId=\(channelId)")!)
        request.timeoutInterval = 5
        socket = WebSocket(request: request)
        socket.delegate = self
        socket.connect()
    }
    
    func didReceive(event: WebSocketEvent, client: WebSocket) {
        switch event {
            case .connected(let headers):
                isConnected = true
                print("websocket is connected: \(headers)")
                socket.write(string: "Did receive")
            case .disconnected(let reason, let code):
                isConnected = false
                print("websocket is disconnected: \(reason) with code: \(code)")
            case .text(let string):
                print("Received text: \(string)")
            case .binary(let data):
                print("Received data: \(data.count)")
            case .ping(_):
                break
            case .pong(_):
                break
            case .viabilityChanged(_):
                break
            case .reconnectSuggested(_):
                break
            case .cancelled:
                isConnected = false
            case .error(_):
                isConnected = false
                print("websocket error")
            }
    }
}

struct ContentView: View {
    var delegate = Delegate()
    
    var body: some View {
        VStack {
            Text("Hello, world!")
                .padding()
            Button("Submit") {
                var request = URLRequest(url: URL(string: "https://solve.hop.sh")!)
                request.httpMethod = "GET"
                
                let task = URLSession.shared.dataTask(with: request, completionHandler: { data, response, error -> Void in
                    do {
                        let json = try JSONSerialization.jsonObject(with: data!) as! Array<Dictionary<String, AnyObject>>
                        print(json)
                    } catch {
                        print("Error")
                    }
                })
                task.resume()
            }.buttonStyle(.borderedProminent)
            Button("Create Session") {
                Task {
                    await delegate.createSession()
                }
            }.buttonStyle(.borderedProminent)
            Button("Join Session") {
                delegate.joinSession(channelId: delegate.channelId)
            }.buttonStyle(.borderedProminent)
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
